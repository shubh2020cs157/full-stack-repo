# üê≥ Docker Compose for Local Development
# Industry standard multi-service setup

version: "3.8"

services:
  # üóÑÔ∏è PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: shobhit-university-postgres
    environment:
      POSTGRES_DB: shobhit_university
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./forum-crud/sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # üî¥ Redis Cache
  redis:
    image: redis:7-alpine
    container_name: shobhit-university-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # üèóÔ∏è Forum CRUD API
  forum-crud:
    build:
      context: ./forum-crud
      dockerfile: Dockerfile
    container_name: shobhit-university-forum-crud
    environment:
      NODE_ENV: development
      PORT: 3007
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: shobhit_university
      DB_USER: postgres
      DB_PASSWORD: postgres123
    ports:
      - "3007:3007"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./forum-crud:/app
      - /app/node_modules
    networks:
      - app-network
    restart: unless-stopped

  # ‚ö° Performance Optimization API
  performance-optimization:
    build:
      context: ./performance-optimization
      dockerfile: Dockerfile
    container_name: shobhit-university-performance
    environment:
      NODE_ENV: development
      PORT: 3008
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3008:3008"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./performance-optimization:/app
      - /app/node_modules
    networks:
      - app-network
    restart: unless-stopped

  # üöÄ Portfolio Builder (Development)
  portfolio-builder:
    build:
      context: ./portfolio-builder
      dockerfile: Dockerfile.dev
    container_name: shobhit-university-portfolio
    environment:
      NODE_ENV: development
      PORT: 3005
    ports:
      - "3005:3005"
    volumes:
      - ./portfolio-builder:/app
      - /app/node_modules
    networks:
      - app-network
    restart: unless-stopped

  # üîê OAuth Next.js (Development)
  oauth-nextjs:
    build:
      context: ./oauth-nextjs
      dockerfile: Dockerfile.dev
    container_name: shobhit-university-oauth
    environment:
      NODE_ENV: development
      PORT: 3006
      NEXTAUTH_URL: http://localhost:3006
      NEXTAUTH_SECRET: your-super-secret-nextauth-secret-key-here
      GOOGLE_CLIENT_ID: your-google-client-id-here
      GOOGLE_CLIENT_SECRET: your-google-client-secret-here
    ports:
      - "3006:3006"
    volumes:
      - ./oauth-nextjs:/app
      - /app/node_modules
      - /app/.next
    networks:
      - app-network
    restart: unless-stopped

  # üìä Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: shobhit-university-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - app-network

  # üìà Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: shobhit-university-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge

